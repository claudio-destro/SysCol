import {parseCommand} from "../../../protocols/syscol/parseCommand";

describe("parseCommand", () => {
  test('"ver" should not throw', () => expect(() => parseCommand(" ver")).not.toThrow());
  test('"ver" should not throw', () => expect(() => parseCommand(" ver ?")).not.toThrow());
  test('"ver" should not throw', () => expect(() => parseCommand(" ver x")).not.toThrow());
  test('"car" should not throw', () => expect(() => parseCommand("car,0fh")).not.toThrow());
  test('"car" should not throw', () => expect(() => parseCommand("car,?")).not.toThrow());
  test('"dev" should not throw', () => expect(() => parseCommand("dev,05h")).not.toThrow());
  test('"dev" should not throw', () => expect(() => parseCommand("dev,?")).not.toThrow());
  test('"dut" should not throw', () => expect(() => parseCommand("dut,?")).not.toThrow());
  test('"dut" should not throw', () => expect(() => parseCommand("dut,c")).not.toThrow());
  test('"dut" should not throw', () => expect(() => parseCommand("dut,s")).not.toThrow());
  test('"ddi" should not throw', () => expect(() => parseCommand("ddi,l")).not.toThrow());
  test('"ddi" should not throw', () => expect(() => parseCommand("ddi,h")).not.toThrow());
  test('"ddi" should not throw', () => expect(() => parseCommand("ddi,?")).not.toThrow());
  test('"ddo" should not throw', () => expect(() => parseCommand("ddo,6,1")).not.toThrow());
  test('"ddo" should not throw', () => expect(() => parseCommand("ddo,4,?")).not.toThrow());
  test('"dai" should not throw', () => expect(() => parseCommand("dai,00,c")).not.toThrow());
  test('"dai" should not throw', () => expect(() => parseCommand("dai,14 ?")).not.toThrow());
  test('"dao" should not throw', () => expect(() => parseCommand("dao,1,01bdh")).not.toThrow());
  test('"dao" should not throw', () => expect(() => parseCommand("dao,5,?")).not.toThrow());
  test('"dvi" should not throw', () => expect(() => parseCommand("dvi,1,c")).not.toThrow());
  test('"dvi" should not throw', () => expect(() => parseCommand("dvi,4,?")).not.toThrow());
  test('"dag" should not throw', () => expect(() => parseCommand("dag,0,c")).not.toThrow());
  test('"dag" should not throw', () => expect(() => parseCommand("dag,2,?")).not.toThrow());
  test('"dmg" should not throw', () => expect(() => parseCommand("dmg,1")).not.toThrow());
  test('"dmg" should not throw', () => expect(() => parseCommand("dmg,?")).not.toThrow());
  test('"igl" should not throw', () => expect(() => parseCommand("igl,2000.0ma")).not.toThrow());
  test('"igl" should not throw', () => expect(() => parseCommand("igl,?")).not.toThrow());
  test('"alm" should not throw', () => expect(() => parseCommand("alm,?")).not.toThrow());
  test('"alm" should not throw', () => expect(() => parseCommand("alm,igl,?")).not.toThrow());
  test('"alm" should not throw', () => expect(() => parseCommand("alm,vgl,?")).not.toThrow());
  test('"alm" should not throw', () => expect(() => parseCommand("alm,vgh,?")).not.toThrow());
  test('"vgl" should not throw', () => expect(() => parseCommand(" vgl, 24.000v")).not.toThrow());
  test('"vgl" should not throw', () => expect(() => parseCommand(" vgl, 2.000v")).not.toThrow());
  test('"vgl" should not throw', () => expect(() => parseCommand(" vgl, 2.1v")).not.toThrow());
  test('"vgl" should not throw', () => expect(() => parseCommand(" vgl, ?")).not.toThrow());
  test('"vgh" should not throw', () => expect(() => parseCommand(" vgh, 200.0v")).not.toThrow());
  test('"vgh" should not throw', () => expect(() => parseCommand(" vgh, ?")).not.toThrow());
  test('"alm" should not throw', () => expect(() => parseCommand(" alm, vgh, ?")).not.toThrow());
  test('"rst" should not throw', () => expect(() => parseCommand(" rst, 1")).not.toThrow());
  test('"rst" should not throw', () => expect(() => parseCommand(" rst, 0")).not.toThrow());
  test('"rst" should not throw', () => expect(() => parseCommand(" rst, ?")).not.toThrow());
  test('"dgi" should not throw', () => expect(() => parseCommand(" dgi, a, ?")).not.toThrow());
  test('"dgi" should not throw', () => expect(() => parseCommand(" dgi, f, ?")).not.toThrow());
  test('"dgi" should not throw', () => expect(() => parseCommand(" dgi, 1, ?")).not.toThrow());
  test('"rly" should not throw', () => expect(() => parseCommand(" rly, 81, 1")).not.toThrow());
  test('"rly" should not throw', () => expect(() => parseCommand(" rly, 10, ?")).not.toThrow());
  test('"rly" should not throw', () => expect(() => parseCommand(" rly, a, 0")).not.toThrow());
  test('"vin" should not throw', () => expect(() => parseCommand(" vin, ?")).not.toThrow());
  test('"frq" should not throw', () => expect(() => parseCommand(" frq, ?")).not.toThrow());
  test('"per" should not throw', () => expect(() => parseCommand(" per, ?")).not.toThrow());
  test('"ton" should not throw', () => expect(() => parseCommand(" ton, ?")).not.toThrow());
  test('"dty" should not throw', () => expect(() => parseCommand(" dty, ?")).not.toThrow());
  test('"bfu" should not throw', () => expect(() => parseCommand(" bfu, ?")).not.toThrow());
});
