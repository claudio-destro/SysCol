import {parseCommand} from "../../script/parseCommand";

describe("parseCommand", () => {
  test('should parse "ver"', () => expect(parseCommand(" ver ?")).toEqual(["ver", "?"]));
  test('should parse "ver"', () => expect(parseCommand(" ver x")).toEqual(["ver", "x"]));
  test('should parse "car"', () => expect(parseCommand("car,0fh")).toEqual(["car", "0fh"]));
  test('should parse "car"', () => expect(parseCommand("car,?")).toEqual(["car", "?"]));
  test('should parse "dev"', () => expect(parseCommand("dev,05h")).toEqual(["dev", "05h"]));
  test('should parse "dev"', () => expect(parseCommand("dev,?")).toEqual(["dev", "?"]));
  test('should parse "dut"', () => expect(parseCommand("dut,?")).toEqual(["dut", "?"]));
  test('should parse "dut"', () => expect(parseCommand("dut,c")).toEqual(["dut", "c"]));
  test('should parse "dut"', () => expect(parseCommand("dut,s")).toEqual(["dut", "s"]));
  test('should parse "ddi"', () => expect(parseCommand("ddi,l")).toEqual(["ddi", "l"]));
  test('should parse "ddi"', () => expect(parseCommand("ddi,h")).toEqual(["ddi", "h"]));
  test('should parse "ddi"', () => expect(parseCommand("ddi,?")).toEqual(["ddi", "?"]));
  test('should parse "ddo"', () => expect(parseCommand("ddo,6,1")).toEqual(["ddo", "6", "1"]));
  test('should parse "ddo"', () => expect(parseCommand("ddo,4,?")).toEqual(["ddo", "4", "?"]));
  test('should parse "dai"', () => expect(parseCommand("dai,00,c")).toEqual(["dai", "00", "c"]));
  test('should parse "dai"', () => expect(parseCommand("dai,14 ?")).toEqual(["dai", "14", "?"]));
  test('should parse "dao"', () => expect(parseCommand("dao,1,01bdh")).toEqual(["dao", "1", "01bdh"]));
  test('should parse "dao"', () => expect(parseCommand("dao,5,?")).toEqual(["dao", "5", "?"]));
  test('should parse "dvi"', () => expect(parseCommand("dvi,1,c")).toEqual(["dvi", "1", "c"]));
  test('should parse "dvi"', () => expect(parseCommand("dvi,4,?")).toEqual(["dvi", "4", "?"]));
  test('should parse "dag"', () => expect(parseCommand("dag,0,c")).toEqual(["dag", "0", "c"]));
  test('should parse "dag"', () => expect(parseCommand("dag,2,?")).toEqual(["dag", "2", "?"]));
  test('should parse "dmg"', () => expect(parseCommand("dmg,1")).toEqual(["dmg", "1"]));
  test('should parse "dmg"', () => expect(parseCommand("dmg,?")).toEqual(["dmg", "?"]));
  test('should parse "igl"', () => expect(parseCommand("igl,2000.0ma")).toEqual(["igl", "2000.0ma"]));
  test('should parse "igl"', () => expect(parseCommand("igl,?")).toEqual(["igl", "?"]));
  test('should parse "alm"', () => expect(parseCommand("alm,?")).toEqual(["alm", "?"]));
  test('should parse "alm"', () => expect(parseCommand("alm,igl,?")).toEqual(["alm", "igl", "?"]));
  test('should parse "alm"', () => expect(parseCommand("alm,vgl,?")).toEqual(["alm", "vgl", "?"]));
  test('should parse "alm"', () => expect(parseCommand("alm,vgh,?")).toEqual(["alm", "vgh", "?"]));
  test('should parse "vgl"', () => expect(parseCommand(" vgl, 24.000v")).toEqual(["vgl", "24.000v"]));
  test('should parse "vgl"', () => expect(parseCommand(" vgl, 2.000v")).toEqual(["vgl", "2.000v"]));
  test('should parse "vgl"', () => expect(parseCommand(" vgl, 2.1v")).toEqual(["vgl", "2.1v"]));
  test('should parse "vgl"', () => expect(parseCommand(" vgl, ?")).toEqual(["vgl", "?"]));
  test('should parse "vgh"', () => expect(parseCommand(" vgh, 200.0v")).toEqual(["vgh", "200.0v"]));
  test('should parse "vgh"', () => expect(parseCommand(" vgh, ?")).toEqual(["vgh", "?"]));
  test('should parse "alm"', () => expect(parseCommand(" alm, vgh, ?")).toEqual(["alm", "vgh", "?"]));
  test('should parse "rst"', () => expect(parseCommand(" rst, 1")).toEqual(["rst", "1"]));
  test('should parse "rst"', () => expect(parseCommand(" rst, 0")).toEqual(["rst", "0"]));
  test('should parse "rst"', () => expect(parseCommand(" rst, ?")).toEqual(["rst", "?"]));
  test('should parse "dgi"', () => expect(parseCommand(" dgi, a, ?")).toEqual(["dgi", "a", "?"]));
  test('should parse "dgi"', () => expect(parseCommand(" dgi, f, ?")).toEqual(["dgi", "f", "?"]));
  test('should parse "dgi"', () => expect(parseCommand(" dgi, 1, ?")).toEqual(["dgi", "1", "?"]));
  test('should parse "rly"', () => expect(parseCommand(" rly, 81, 1")).toEqual(["rly", "81", "1"]));
  test('should parse "rly"', () => expect(parseCommand(" rly, 10, ?")).toEqual(["rly", "10", "?"]));
  test('should parse "rly"', () => expect(parseCommand(" rly, a, 0")).toEqual(["rly", "a", "0"]));
  test('should parse "vin"', () => expect(parseCommand(" vin, ?")).toEqual(["vin", "?"]));
  test('should parse "frq"', () => expect(parseCommand(" frq, ?")).toEqual(["frq", "?"]));
  test('should parse "per"', () => expect(parseCommand(" per, ?")).toEqual(["per", "?"]));
  test('should parse "ton"', () => expect(parseCommand(" ton, ?")).toEqual(["ton", "?"]));
  test('should parse "dty"', () => expect(parseCommand(" dty, ?")).toEqual(["dty", "?"]));
  test('should parse "bfu"', () => expect(parseCommand(" bfu, ?")).toEqual(["bfu", "?"]));
});
